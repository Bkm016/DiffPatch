buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group 'net.minecraftforge'
archivesBaseName = 'DiffPatch'

def gitInfo(dir) {
    String.metaClass.rsplit = { String del, int limit = -1 ->
        def lst = new ArrayList()
        def x = 0, idx
        def tmp = delegate
        while ((idx = tmp.lastIndexOf(del)) != -1 && (limit == -1 || x++ < limit)) {
            lst.add(0, tmp.substring(idx + del.length(), tmp.length()))
            tmp = tmp.substring(0, idx)
        }
        lst.add(0, tmp)
        return lst
    }
    
    def git = null
    try {
        git = org.eclipse.jgit.api.Git.open(dir)
    } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) {
        return [
            tag: '0.0',
            offset: '0',
            hash: '00000000',
            branch: 'master',
            commit: '0000000000000000000000',
            abbreviatedId: '00000000'
        ]
    }
    def desc = git.describe().setLong(true).setTags(true).call().rsplit('-', 2)
    def head = git.repository.exactRef('HEAD')
    def longBranch = head.symbolic ? head?.target?.name : null // matches Repository.getFullBranch() but returning null when on a detached HEAD

    def ret = [:]
    ret.tag = desc[0]
    ret.offset = desc[1]
    ret.hash = desc[2]
    ret.branch = longBranch != null ? org.eclipse.jgit.lib.Repository.shortenRefName(longBranch) : null
    ret.commit = org.eclipse.jgit.lib.ObjectId.toString(head.objectId)
    ret.abbreviatedId = head.objectId.abbreviate(8).name()
    
    return ret
}

def gitVersion() {
    def info = gitInfo(rootProject.file('.'))
    def branch = info.branch
    if (branch != null && branch.startsWith('pulls/'))
        branch = 'pr' + branch.rsplit('/', 1)[1]
    if (branch in [null, 'master', 'HEAD', '2.0'])
        return "${info.tag}.${info.offset}".toString()
    return "${info.tag}.${info.offset}-${branch}".toString()
}

version = gitVersion()
println('Version: ' + version + ' Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

sourceSets {
    create('gradle')
    main
}

configurations {
    shadow
    implementation.extendsFrom shadow
    gradleImplementation.extendsFrom implementation
}

dependencies {
    shadow 'it.unimi.dsi:fastutil:8.3.1'
    shadow 'org.apache.commons:commons-lang3:3.9'
    shadow 'org.apache.commons:commons-compress:1.18'
    shadow 'org.tukaani:xz:1.8'
    shadow 'net.sf.jopt-simple:jopt-simple:5.0.4'
    gradleImplementation sourceSets.main.output
    gradleCompileOnly gradleApi()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()
}

def commonManifest = {
    attributes 'Main-Class': 'codechicken.diffpatch.DiffPatch'
}

jar {
    manifest commonManifest
    from file("LICENSE.txt")
    from sourceSets.gradle.output
}

shadowJar {
    minimize()
    manifest commonManifest
    configurations = [project.configurations.shadow]

    //Include license, exclude java9 and maven things.
    from file("LICENSE.txt")
    from sourceSets.gradle.output
    exclude 'META-INF/maven/**'
    exclude 'module-info.class'

    //Relocate all our dependencies into a repack package.
    relocate 'it.unimi', 'codechicken.repack.it.unimi'
    relocate 'org.apache', 'codechicken.repack.org.apache'
    relocate 'org.tukaani', 'codechicken.repack.org.tukaani'
    relocate 'joptsimple', 'codechicken.repack.joptsimple'
    //Transform joptsimple properties files.
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
        paths << "joptsimple/ExceptionMessages.properties"
        paths << "joptsimple/HelpFormatterMessages.properties"
        keyTransformer = { key ->
            key.replaceAll('^(joptsimple\\..*)$', 'codechicken.repack.$1')
        }
    }
}

task srcJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
    from file("LICENSE.txt")
}

publishing {
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                url 'https://maven.minecraftforge.net/'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
    publications {
        DiffPatch(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components['java']
            artifact shadowJar
            artifact srcJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesnt like GString's here apparently..
                url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                scm {
                    url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                    connection = "scm:git:git://github.com/TheCBProject/${archivesBaseName}.git".toString()
                    connection = "scm:git:git@github.com:TheCBProject/${archivesBaseName}.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/TheCBProject/${archivesBaseName}/issues".toString()
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/TheCBProject/DiffPatch/master/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
                developers {
                    developer {
                        id = 'ChickenBones'
                        name = 'Chicken Bones'
                    }
                }
            }
        }
    }
}
